# SPDX-License-Identifier: AGPL-3.0-only
#
# Komponist - Generate Your Favourite Compose Stack With the Least Effort
#
# Copyright (C) 2023  Shantanoo "Shan" Desai <sdes.softdev@gmail.com>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published
#   by the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# bootstrap_nodered.yml: Ansible Playbook that installs External Nodes
# into running node-red (either offline or online mode)
---
- name: Bootstrap Node-RED instance with Database Nodes
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars/config.yml
    - vars/creds.yml

  module_defaults:
    ansible.builtin.uri:
      method: POST
      headers:
        Content-Type: application/json

  tasks:
    - name: Gather Container Facts for Checks
      community.docker.docker_container_info:
        name: "{{ komponist.project_name }}_nodered"
      register: nodered_container_info
      tags: [always]

    - name: Assert that Node-RED Container is Running
      ansible.builtin.assert:
        that: nodered_container_info.container.State.Status == 'running'
        fail_msg: "FAIL: trying to bootstrap Node-RED container but it is not running."
        success_msg: "PASS: Node-RED container running."
      tags: [always]

    - name: Get Node-RED user with Read-Write Permissions
      ansible.builtin.set_fact:
        nodered_creds: "{{ item }}"
      when: "item.permissions is defined and item['permissions'] == '*'"
      loop: "{{ credentials.nodered.users }}"
      no_log: true
      tags: [always]

    - name: Obtain Node-RED Authentication Token
      ansible.builtin.uri:
        url: http://localhost/nodered/auth/token
        body:
          client_id: node-red-admin
          grant_type: password
          scope: "{{ nodered_creds.permissions }}"
          username: "{{ nodered_creds.username }}"
          password: "{{ nodered_creds.password }}"
        body_format: json
        status_code: 200
      register: auth_token
      when: nodered_creds is defined
      tags: [always]


    - name: (Online) Read `nodes.json` File for Bootstrapping Node-RED
      ansible.builtin.set_fact:
        external_nodes: '{{ lookup("ansible.builtin.file", komponist.deploy_dir | default(ansible_user_dir + "/.komponist") + "/nodered/nodes.json") }}'
      tags: [online]

    - name: (Online) Bootstrap Node-RED with External Nodes using nodes.json
      ansible.builtin.uri:
        url: http://localhost/nodered/nodes
        headers:
          Authorization: "{{ auth_token.json.token_type }} {{ auth_token.json.access_token }}"
        body:
          module: "{{ item.module }}"
          version: "{{ item.version }}"
        body_format: json
        status_code:
          - 200
          - 400
      loop: "{{ external_nodes }}"
      tags: [online]

    - name: (Offline) Obtain information of External Nodes tarballs
      ansible.builtin.find:
        paths: "{{ komponist.deploy_dir | default(ansible_user_dir + '/.komponist') }}/nodered/"
        patterns:
          - '*.tgz'
      register: node_tarballs
      tags: [never, offline]

    - name: Check for existing tarballs
      ansible.builtin.assert:
        that: "{{ node_tarballs.files | length != 0 }}"
        fail_msg: "Cannot find any node tarballs with .tgz suffix in {{ komponist.deploy_dir | default(ansible_user_dir + '/.komponist') }}/nodered"
        success_msg: "Found tarballs for external nodes to upload in {{ komponist.deploy_dir  | default(ansible_user_dir + '/.komponist') }}/nodered"
      tags: [never, offline]

    # NOTE: Uploading via uri Module with multipart/form-data body and HTTP POST
    #       throws unknown errors from node-RED side. Chances are uri module does base64 encoding
    #       of the tarball which the node-RED backend is unable to decode causing errors.
    #       Only solution at the moment is to use curl with the command module.
    - name: (Offline) Bootstap Node-RED with External Nodes via tarballs
      ansible.builtin.command:  # noqa: command-instead-of-module
        cmd: >
          curl -s -XPOST http://localhost/nodered/nodes -H "Content-Type: multipart/form-data" \
           -H "Authorization: {{ auth_token.json.token_type }} {{ auth_token.json.access_token }}" \
           -F "tarball=@{{ item.path }};type=application/gzip;filename={{ item.path | basename }}"
      with_items: "{{ node_tarballs.files }}"
      register: curl_post_output
      failed_when: curl_post_output.stdout == 'Unauthorized'
      changed_when: curl_post_output.stdout != '{"code":"module_already_loaded","message":"Module already loaded"}'
      tags: [never, offline]

    - name: Revoke Authentication Token
      ansible.builtin.uri:
        url: http://localhost/nodered/auth/revoke
        headers:
          Authorization: "{{ auth_token.json.token_type }} {{ auth_token.json.access_token }}"
        body:
          token: "{{ auth_token.json.access_token }}"
        body_format: json
        status_code: 200
      tags: [always]
