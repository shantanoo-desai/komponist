# SPDX-License-Identifier: AGPL-3.0-only
#
# Komponist - Generate Your Favourite Compose Stack With the Least Effort
#
# Copyright (C) 2023  Shantanoo "Shan" Desai <sdes.softdev@gmail.com>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published
#   by the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# export_flow_nodered.yml: Ansible Playbook that exports the current flow from an instance
# and create a flows file
---
- name: Export Complete Flow from Node-RED
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars/config.yml
    - vars/creds.yml
  module_defaults:
    ansible.builtin.uri:
      method: POST
      headers:
        Content-Type: application/json

  tasks:
    - name: Get Node-RED user with all Privileges
      ansible.builtin.set_fact:
        nodered_creds: "{{ item }}"
      when: "item.permissions is defined and item['permissions'] == '*'"
      loop: "{{ credentials.nodered.users }}"
      no_log: true

    - name: Obtain Authentication Token
      ansible.builtin.uri:
        url: "http://localhost/nodered/auth/token"
        body:
          client_id: node-red-admin
          grant_type: password
          scope: "{{ nodered_creds.permissions }}"
          username: "{{ nodered_creds.username }}"
          password: "{{ nodered_creds.password }}"
        body_format: json
        status_code: 200
      register: auth_token
      when: nodered_creds is defined

    - name: Lookup flows from Node-RED instance
      ansible.builtin.set_fact:
        main_flow: "{{ lookup('ansible.builtin.url', 'http://localhost/nodered/flows', headers=headers) }}"
      vars:
        headers:
          Content-Type: application/json
          Authorization: "{{ auth_token.json.token_type }} {{ auth_token.json.access_token }}"
          Node-RED-API-Version: v2

    - name: Obtain flows_cred file from Container
      community.docker.docker_container_exec:
        container: komponist_nodered
        command: /bin/bash -c "cat /data/flows_cred.json"
      register: flows_cred
      ignore_errors: true

    - name: Generate Flow JSON file Fact with Credentials
      ansible.builtin.set_fact:
        final_flow: "{{ main_flow | combine({'credentials': flows_cred.stdout | from_json}) | ansible.utils.remove_keys(['rev']) | trim }}"
      when: flows_cred.rc == 0

    - name: Generate Flow JSON file Fact without Credentials
      ansible.builtin.set_fact:
        final_flow: "{{ main_flow | ansible.utils.remove_keys(['rev']) | trim }}"
      when: flows_cred.rc != 0

    - name: Create flows.json into deploy/nodered directory
      ansible.builtin.copy:
        dest: "{{ komponist.deploy_dir }}/nodered/flows_{{ ansible_date_time.date }}.json"
        content: "{{ final_flow | to_nice_json }}"
        mode: '0644'

    - name: Revoke Authentication Token
      ansible.builtin.uri:
        url: http://localhost/nodered/auth/revoke
        headers:
          Authorization: "{{ auth_token.json.token_type }} {{ auth_token.json.access_token }}"
        body:
          token: "{{ auth_token.json.access_token }}"
        body_format: json
        status_code: 200
